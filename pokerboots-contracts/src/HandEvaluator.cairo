// src/HandEvaluator.cairo
%lang starknet
%builtins pedersen

use array::ArrayTrait;
use core::felt252;

/// --- Immutable lookup table -------------------------------------------
/// Generated by scripts/gen_table.cairo   (≈ 32 k entries)
const LOOKUP : @Array<felt252> = @("0x026A ..." /* truncated */);

/// Returns 7-card hand rank (0 = Royal Flush … 7461 = 7-high)
/// Cards are packed exactly as in DeckShuffler: two felts per card
///   rank (0-12) then suit (0-3)
#[view]
func rank7{
        syscall_ptr : felt*,
        pedersen_ptr : HashBuiltin*,
        range_check_ptr
    }(cards : Array<felt252>) -> felt252
{
    assert(cards.len() == 14);          // 7 × (rank,suit)

    let CARD_PRIME = @array<u32>(
        2,3,5,7,11,13,17,19,23,29,31,37,41);  // primes for ranks

    let mut prod : felt252 = 1;
    let mut i = 0;
    while (i < 14){
        let rank = cards.at(i);         // suit is cards.at(i+1) – ignored
        prod *= CARD_PRIME[rank];       // overflow safe in 251-bit field
        i += 2;
    };

    // binary-search lookup table (sorted by key)
    let idx = _binary_search(prod);
    let strength = LOOKUP.at(idx);      // 0 - 7461
    return (strength,);
}

/// Gas-cheap binary search (table sorted ascending by product)
func _binary_search{range_check_ptr}(key : felt252) -> felt252 {
    let mut low = 0;
    let mut high = LOOKUP.len() - 1;
    let mut mid;

    loop {
        if low > high { panic!("hand key not found"); }
        mid = (low + high) / 2;
        let val = LOOKUP.at(mid);
        if val == key { return mid; }
        if val < key { low = mid + 1; }
        else         { high = mid - 1; }
    };
    unreachable!();
}
